import heapq
class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def mergeKLists(lists):
    min_heap = []
    for i in range(len(lists)):
        if lists[i]:
            heapq.heappush(min_heap, (lists[i].val, i, lists[i]))
    
    dummy = ListNode()
    current = dummy
    
    while min_heap:
        val, idx, node = heapq.heappop(min_heap)
        current.next = ListNode(val)
        current = current.next
        node = node.next   
        if node:
            heapq.heappush(min_heap, (node.val, idx, node))
    
    return dummy.next
def list_to_linkedlist(lst):
    if not lst:
        return None
    head = ListNode(lst[0])
    current = head
    for val in lst[1:]:
        current.next = ListNode(val)
        current = current.next
    return head
def linkedlist_to_list(node):
    result = []
    while node:
        result.append(node.val)
        node = node.next
    return result
lists = [[1,4,5], [1,3,4], [2,6]]
linked_lists = [list_to_linkedlist(lst) for lst in lists]
merged_list = mergeKLists(linked_lists)
result = linkedlist_to_list(merged_list)
print(result) 
