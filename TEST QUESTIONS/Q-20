import heapq

def findKthLargest(nums, k):
    # Initialize a min-heap
    min_heap = []
    
    # Push the first k elements into the min-heap
    for num in nums[:k]:
        heapq.heappush(min_heap, num)
    
    # Iterate over the remaining elements
    for num in nums[k:]:
        # If the current element is larger than the smallest element in the heap
        # Replace the smallest element with the current element
        if num > min_heap[0]:
            heapq.heapreplace(min_heap, num)
    
    # The root of the min-heap is the kth largest element
    return min_heap[0]

# Example usage:
nums1 = [3, 2, 1, 5, 6, 4]
k1 = 2
print(findKthLargest(nums1, k1))  # Output: 5

nums2 = [3, 2, 3, 1, 2, 4, 5, 5, 6]
k2 = 4
print(findKthLargest(nums2, k2))  # Output: 4
