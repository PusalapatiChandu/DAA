class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def sort_list(head):
    if not head or not head.next:
        return head

    # Find the middle of the linked list
    mid = get_middle(head)
    left = head
    right = mid.next
    mid.next = None

    # Recursively split and sort the list
    left = sort_list(left)
    right = sort_list(right)

    # Merge the sorted halves
    return merge(left, right)

def get_middle(head):
    slow, fast = head, head.next
    while fast and fast.next:
        slow = slow.next
        fast = fast.next.next
    return slow

def merge(l1, l2):
    dummy = ListNode()
    tail = dummy

    while l1 and l2:
        if l1.val < l2.val:
            tail.next = l1
            l1 = l1.next
        else:
            tail.next = l2
            l2 = l2.next
        tail = tail.next

    tail.next = l1 if l1 else l2
    return dummy.next

# Helper function to print the linked list
def print_list(head):
    while head:
        print(head.val, end=" -> ")
        head = head.next
    print("None")

# Example usage
head = ListNode(4, ListNode(2, ListNode(1, ListNode(3))))
sorted_head = sort_list(head)
print_list(sorted_head)  # Output: 1 -> 2 -> 3 -> 4 -> None
