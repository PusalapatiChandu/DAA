class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def mergeKLists(lists):
    def mergeTwoLists(l1, l2):
        dummy = ListNode(0)
        curr = dummy
        while l1 and l2:
            if l1.val < l2.val:
                curr.next = l1
                l1 = l1.next
            else:
                curr.next = l2
                l2 = l2.next
            curr = curr.next
        curr.next = l1 if l1 else l2
        return dummy.next
    
    def mergeLists(lists, start, end):
        if start == end:
            return lists[start]
        if start < end:
            mid = (start + end) // 2
            left = mergeLists(lists, start, mid)
            right = mergeLists(lists, mid + 1, end)
            return mergeTwoLists(left, right)
        return None
    
    if not lists:
        return None
    return mergeLists(lists, 0, len(lists) - 1)

def createLinkedList(arr):
    dummy = ListNode(0)
    curr = dummy
    for val in arr:
        curr.next = ListNode(val)
        curr = curr.next
    return dummy.next

# Example usage:
lists = [[1,4,5], [1,3,4], [2,6]]
linked_lists = [createLinkedList(lst) for lst in lists]
merged_list = mergeKLists(linked_lists)

def linkedListToList(head):
    result = []
    while head:
        result.append(head.val)
        head = head.next
    return result

print(linkedListToList(merged_list))  # Output: [1, 1, 2, 3, 4, 4, 5, 6]
